{"version":3,"sources":["components/common/formsControls/FormsControls.js","utils/validators/validators.js","components/common/formsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/addMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["FormControl","input","meta","touched","error","children","hasError","className","s","formControl","TextArea","props","Restprops","child","Input","createField","placeholder","name","validators","component","validate","required","value","maxLengthCreator","maxLength","length","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogItem","path","id","dialog","activeClassName","activeLink","Message","messageClass","message","userClass","src","alt","message_logo","message_text","reduxForm","form","dialogs_form","onSubmit","handleSubmit","Field","Dialogs","dialogsElements","dialogsPage","dailogs","map","d","key","messagesElements","messages","m","my","user","dialogs","title","dialogs_inner","items","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"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","file":"static/js/5.b405c5c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormsControls.module.css';\r\nimport { Field } from 'redux-form';\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children }) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea = (props) => {\r\n    const { input, meta, child, ...Restprops } = props;\r\n    return <FormControl {...props}><textarea {...input} {...Restprops} /></FormControl>\r\n\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...Restprops } = props;\r\n    return <FormControl {...props}><input {...input} {...Restprops} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props) => (\r\n        <Field placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props} />\r\n)","export const required = value => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2BbQV\",\"error\":\"FormsControls_error__2IyVm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Dialogs_title__pefgm\",\"dialogs_inner\":\"Dialogs_dialogs_inner__gcjiN\",\"items\":\"Dialogs_items__2NmwD\",\"dialog\":\"Dialogs_dialog__3R3Dg\",\"activeLink\":\"Dialogs_activeLink__2Npr-\",\"messages\":\"Dialogs_messages__3KXN0\",\"message\":\"Dialogs_message__1qDjw\",\"user\":\"Dialogs_user__jwXv2\",\"message_logo\":\"Dialogs_message_logo__1BQfg\",\"message_text\":\"Dialogs_message_text__2MRyU\",\"dialogs_form\":\"Dialogs_dialogs_form__WPHOi\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n   \r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    let messageClass = `${s.message} ${props.userClass}`;\r\n\r\n    return (\r\n        <div className={messageClass}>\r\n            <img src=\"https://png.pngtree.com/element_our/20190604/ourmid/pngtree-user-avatar-boy-image_1482937.jpg\" alt=\"\" className={s.message_logo} />\r\n            <p className={s.message_text}>{props.message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { TextArea } from './../common/formsControls/FormsControls';\r\nimport { required, maxLengthCreator } from './../../utils/validators/validators';\r\n\r\nlet maxLength = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={s.dialogs_form} onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea}\r\n            validate={[required, maxLength]}\r\n                name='newMessageBody' placeholder='Enter your message...' />\r\n            <button >Send it</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'dialogaddMessageForm' })(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport AddMessageForm from './addMessageForm'\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dailogs.map(d => {\r\n        return <DialogItem name={d.name} key={d.id} id={d.id} />\r\n    });\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => {\r\n        return <Message message={m.message} key={m.id} userClass={m.my ? s.user : ''} />\r\n    });\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to='/login' />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <h2 className={s.title}>Dialogs</h2>\r\n            <div className={s.dialogs_inner}>\r\n                <div className={s.items}>\r\n\r\n                    {dialogsElements}\r\n\r\n                </div>\r\n\r\n                <div className={s.messages}>\r\n\r\n                    {messagesElements}\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from './../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n// const DialogsContainer = () => {\r\n\r\n//     return <StoreContext.Consumer>\r\n//         {store => {\r\n//             let onAddMessage = () => {\r\n//                 let action = addMessageActionCreator();\r\n//                 store.dispatch(action);\r\n//             }\r\n\r\n//             let onMessageChange = (text) => {\r\n//                 let action = updateNewMessageTextActionCreator(text)\r\n//                 store.dispatch(action);\r\n//             }\r\n//             return <Dialogs dialogsPage={store.getState().dialogsPage}\r\n//                 updateNewMessageText={onMessageChange}\r\n//                 addMessage={onAddMessage} />;\r\n//         }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}